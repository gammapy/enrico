# Default config and validation file for Enrico.
#
# Besides providing default options it is also used
# to check the user config file.
# Options without default options here must be
# specified in the user config file

# Folder where the output will be stored
out = string
# verbosity
verbose = option('yes', 'no', default='yes')
#Overwrite existing output files. Use with caution
clobber = option('yes', 'no', default='yes')
#Submit the job to a cluster?
Submit = option('yes', 'no', default='no')

[file]
	# File names (FT2, FT1 and XML). All the files have a tag
	spacecraft = string(default=spacecraft.fits)
	event = string(default=events.lis)
	xml = string(default=model.xml)
	tag = string(default='')
    ltcube = string(default='')

[environ]
	# Analysis environment configuration
	# Can also be done via shell environment variables
	FERMI_DATA_DIR = string(default='')
	FERMI_CATALOG_DIR = string(default='')
	FERMI_CATALOG = string(default='')
	FERMI_DIFFUSE_DIR = string(default='')
	FERMI_PREPROCESSED_DIR = string(default='')	

[target]
	# Target and modelling options
	name = string(default=MySource)
	ra = float(default=0.)
	dec = float(default=0.)
	# supported models are PowerLaw, PowerLaw2, LogParabola, PLExpCutoff, Generic
	spectrum = option('PowerLaw', 'PowerLaw2', 'LogParabola', 'PLExpCutoff', 'Generic', default='PowerLaw')
	#No effect if = 0, no EBL model added to the spectral shape
	redshift = float(default=0.)
	ebl_model = integer(default=4, min=0, max=6)
    # 0=Kneiske, 1=Primack05, 2=Kneiske_HighUV, 3=Stecker05, 4=Franceschini, 5=Finke, 6=Gilmore
	fit_tau = option('yes', 'no', default='yes')

[analysis]
	# General analysis options
	likelihood = option(binned, unbinned, default=binned)
	ComputeDiffrsp = option('yes', 'no', default='yes')
	zmax = float(default=100)
	roicut = option('yes', 'no', default='no')
	filter = string(default='(DATA_QUAL>0)&&(LAT_CONFIG==1)')

[event]
       #Selection of event+IRFs
       # IRFS : CALDB is equivalent to auto selection of IRFS. evclass=128,  evtype=3 correspond to P8R2_SOURCE_V6
	irfs = string(default='CALDB')
	evclass = integer(default=128, min=1, max=16777216)
	evtype = integer(default=3, min=1, max=512)

[space]
	rad = float(default=15)
	binsz = float(default=0.1)
	coordsys = string(default=CEL)
	xref = float(default=0.)
	yref = float(default=0.)
	proj = string(default=AIT)
	phibins = integer(default=0)

[time]
	tmin = float(default=239557418)
	tmax = float(default=239557418)
	file = string(default='')
	type = option('MET', 'MJD', 'JD', default='MET')

[energy]
	#Energy of the analysis
	emin = float(default=100)
	emax = float(default=300000)
	enumbins_per_decade = integer(default=10)	

[fitting]
	optimizer = option('DRMNFB', 'DRMNGB', 'MINUIT', 'NEWMINUIT', default='MINUIT')
	ftol = float(default=1e-6)

[model]
	# The following options determine the xml model
	diffuse_gal_dir = string(default='')
	diffuse_iso_dir = string(default='')
	diffuse_gal = string(default='')
	diffuse_iso = string(default='')
	# user points sources for diffuse catalog sources
	# freeze spectral parameters for weak and far away sources:
	min_significance = float(default=4)
	max_radius = float(default=3) # -1 means use ROI radius


[Spectrum]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	#Generates plots (SED, model map)
	ResultPlots = option('yes', 'no', default='yes')
	#Freeze the spectral index of the source. Has no implication if 0 (Left free to vary)
	FrozenSpectralIndex = float(default=0, min=0, max=5)  
	#Use the summed likelihood method
	SummedLike = option('yes', 'no', default='no')
    # Calculate MINOS errors?
    minos = option('yes', 'no', default='yes')


[UpperLimit]
	#Assumed Spectral index
	SpectralIndex = float(default=1.5, min=0, max=5)
	# UL method could be Profile or Integral (provided by the fermi collaboration). 
        #Poisson is base on the Feldman-Cousins method for low signal. Only 95 % yet available
	Method =  option('Profile', 'Integral', 'Poisson', default='Profile')
	envelope = option('yes', 'no', default='no')
	#Compute an UL if the TS of the sources is <TSlimit
	TSlimit	= float(default=25)
	# Confidence level for the Ul computation
	cl = float(default=0.95)

[LightCurve]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	#Number of points for the LC
	NLCbin = integer(default = 20)
	#Index for the power law. Left free to vary if 0
	SpectralIndex =  float(default=2, min=0, max=5)
	MakeConfFile = option('yes', 'no', default='yes')c
	#Compute Variability index as in the 2FGL. 
	ComputeVarIndex = option('yes', 'no', default='yes')
	#Compute an UL if the TS of the sources is <TSLightCurve
	TSLightCurve = float(default=9)
	#Generates control plots
	DiagnosticPlots = option('yes', 'no', default='yes')


[FoldedLC]
	#Number of bins for the orbitally folded LC
	NLCbin = integer(default = 10)
	#Epoch of phase=0 in MJD, equal to tmin is 0
	epoch = float(default=0, min=0)
	#Orbital period in days
	Period = float(default=0, min=0)


[AppLC]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	#Spectral index for the exposure calculation
	index = float(default=1.5)
  #Apperture radius 
	rad = float(default=1)
	#Number of bins
	NLCbin = integer(default=10)
	#bin form data or frozen bin size
	binsFromData = option('yes', 'no', default='no')



[Ebin]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	NumEnergyBins = integer(default=0)
	#Compute an UL if the TS of the sources is <TSEnergyBins
	TSEnergyBins = float(default=9)

[TSMap]
	#Re-fit before computing the TS map
	Re-Fit = option('yes', 'no', default='no')
	#Numbers of pixel in x and y
	npix = integer(default=10)
	#Remove or not the target from the model
	RemoveTarget = option('yes', 'no', default='yes')
	#Generate the TS map pixel by pixel or by grouping the pixels by row.
	#(reduce the numbers of jobs but each job is longer)
	method = option('row', 'pixel', default='row')

[findsrc]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	#Reoptimize before
	Refit = option('yes', 'no', default='yes')

[srcprob]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	#radius for the computation
	rad = float(default=1)
	# list of sources 
	srclist = string(default="")
    # number of photons to print
    numberPhoton = integer(default=10)

[Contours]
	parname1 = string(default="Prefactor")
	parname2 = string(default="Index")
