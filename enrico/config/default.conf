# Default config and validation file for Enrico.
#
# Besides providing default options it is also used
# to check the user config file.
# Options without default options here must be
# specified in the user config file

# Folder where the output will be stored
out = string
# verbosity
verbose = option('yes', 'no', default='yes')
#Overwrite existing output files. Use with caution
clobber = option('yes', 'no', default='yes')
#Submit the job to a cluster?
Submit = option('yes', 'no', default='no')

[file]
	# File names (FT2, FT1 and XML). All the files have a tag
	spacecraft = string(default=spacecraft.fits)
	event = string(default=events.lis)
	xml = string(default=model.xml)
	tag = string(default='')
	# keep track of the parent config during nested operations (e.g. energy/time bins)
	parent_config = string(default='')
	compress_fits = option('yes', 'no', default='no')

[environ]
	# Analysis environment configuration
	# Can also be done via shell environment variables
	FERMI_DATA_DIR = string(default='')
	FERMI_CATALOG_DIR = string(default='')
	FERMI_CATALOG = string(default='')
	FERMI_DIFFUSE_DIR = string(default='')
	FERMI_PREPROCESSED_DIR = string(default='')

[target]
	# Target and modelling options
	name = string(default=MySource)
	ra = float(default=0.)
	dec = float(default=0.)
	# supported models are PowerLaw, PowerLaw2, LogParabola, PLExpCutoff, Generic
	spectrum = option('PowerLaw', 'PowerLaw2', 'LogParabola', 'PLExpCutoff', 'BrokenPowerLaw', 'Generic', default='PowerLaw')
	#No effect if = 0, no EBL model added to the spectral shape
	redshift = float(default=0.)
	ebl_model = integer(default=4, min=0, max=20)
        # 0=Kneiske, 1=Primack05, 2=Kneiske_HighUV, 3=Stecker05, 4=Franceschini, 5=Finke, 6=Gilmore, 10=Dominguez11
        # full list http://www-glast.stanford.edu/cgi-bin/viewcvs/celestialSources/eblAtten/eblAtten/EblAtten.h?view=markup
	fit_tau = option('yes', 'no', default='no')

[analysis]
	# General analysis options
	likelihood = option(binned, unbinned, default=binned)
	# Correct energy dispersion?
	EnergyDispersion = option('yes', 'no', default='yes')
	ComputeDiffrsp = option('yes', 'no', default='yes')
	zmax = float(default=100)
	roicut = option('yes', 'no', default='no')
	# cuts applied during the first coarse bin selection:
	evtroicuts = option('yes', 'no', default='yes')
	evttimecuts = option('yes', 'no', default='yes')
	filter = string(default='(DATA_QUAL>0)&&(LAT_CONFIG==1)')
	# should we keep the srcmaps for all sources in the srcMap file?
	# this should speed up future fits, at the cost of disk space.
	keep_all_srcmaps = option('yes', 'no', default='no')

[event]
        #Selection of event+IRFs
        # IRFS : CALDB is equivalent to auto selection of IRFS. evclass=128,  evtype=3 correspond to P8R2_SOURCE_V6
	irfs = string(default='CALDB')
	evclass = integer(default=128, min=1, max=16777216)
	evtype = integer(default=3, min=1, max=512)

[space]
	rad = float(default=15)
	binsz = float(default=0.1)
	coordsys = string(default=CEL)
	xref = float(default=0.)
	yref = float(default=0.)
	proj = string(default=AIT)
	phibins = integer(default=0)

[time]
	tmin = float(default=-1) #239557418
	tmax = float(default=-1) #402122341
	file = string(default='')
	type = option('MET', 'MJD', 'JD', default='MET')

[energy]
	#Energy of the analysis
	emin = float(default=100)
	emax = float(default=300000)
	enumbins_per_decade = integer(default=10)
	decorrelation_energy = option('yes', 'no', default='no')

[fitting]
	optimizer = option('DRMNFB', 'DRMNGB', 'MINUIT', 'NEWMINUIT', default='MINUIT')
	ftol = float(default=1e-6)
	# if source_ts < min_source_TS in the fit, the source is removed from the model
	min_source_TS = float(default=1.0)

[model]
	# The following options determine the xml model
	diffuse_gal_dir = string(default='')
	diffuse_iso_dir = string(default='')
	diffuse_gal = string(default='')
	diffuse_iso = string(default='')
	# user points sources for diffuse catalog sources
	# freeze spectral parameters for weak and far away sources:
	min_significance_catalog = float(default=4)
	min_significance_free = float(default=25)
	max_radius = float(default=5) # -1 means use ROI radius
	# Add all source in a radius of analyse ROI + this radius
	max_roi = float(default=10)
	# Add gaussian noise to the spectral parameters of free sources (may help during the fit)
	parameters_noise = float(default=0)

[Spectrum]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	#Generates plots (SED, model map)
	ResultPlots = option('yes', 'no', default='yes')
	#Plot (update) the parent config related plots during energy bin production
	ResultParentPlots = option('yes', 'no', default='no')
	#Freeze the spectral index of the source. Has no implication if 0 (Left free to vary)
	FrozenSpectralIndex = float(default=0, min=0, max=5)
	#Write covariance matrix to csv file
	WriteCovMatrix = option('yes', 'no', default='yes')
	#Write residuals to csv file
	WriteResiduals = option('yes', 'no', default='yes')

[UpperLimit]
	#Assumed Spectral index
	SpectralIndex = float(default=2, min=0, max=5)
	# UL method could be Profile or Integral (provided by the fermi collaboration).
	#Poisson is base on the Feldman-Cousins method for low signal. Only 95 % yet available
	Method =  option('Profile', 'Integral', 'Poisson', default='Profile')
	envelope = option('yes', 'no', default='no')
	#Compute an UL if the TS of the sources is <TSlimit
	TSlimit	= float(default=25)
	# Confidence level for the Ul computation
	cl = float(default=0.95)

[LightCurve]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	#Number of points for the LC
	NLCbin = integer(default = 20)
	#Index for the power law. Left free to vary if 0
	SpectralIndex =  float(default=2, min=0, max=5)
	MakeConfFile = option('yes', 'no', default='yes')c
	#Bayesian blocks
	BayesianBlocks = option('yes', 'no', default='no')
	#Compute Variability index as in the 2FGL.
	ComputeVarIndex = option('yes', 'no', default='yes')
	#Compute an UL if the TS of the sources is <TSLightCurve
	TSLightCurve = float(default=9)
	#Generates control plots
	DiagnosticPlots = option('yes', 'no', default='yes')
	# Plot (update) the parent config related plots during time bin production
	DiagnosticParentPlots = option('yes', 'no', default='no')

[BayesianBlocks]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	#False alarm probability
	p0 = float(default = 0.01)
	#Index for the power law. Left free to vary if 0
	SpectralIndex =  float(default=2, min=0, max=5)
	MakeConfFile = option('yes', 'no', default='yes')
  	#Compute an UL if the TS of the sources is <TSLightCurve
  	TSLightCurve = float(default=9)
  	#Generates control plots
  	DiagnosticPlots = option('yes', 'no', default='yes')
	# Plot (update) the parent config related plots during time bin production
	DiagnosticParentPlots = option('yes', 'no', default='no')


[FoldedLC]
	#Number of bins for the orbitally folded LC
	NLCbin = integer(default = 10)
	#Epoch of phase=0 in MJD, equal to tmin is 0
	epoch = float(default=0, min=0)
	#Orbital period in days
	Period = float(default=0, min=0)

[AppLC]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	#Spectral index for the exposure calculation
	index = float(default=2)
	#Apperture radius
	rad = float(default=1)
	#Number of bins
	NLCbin = integer(default=10)
	#bin form data or frozen bin size
	binsFromData = option('yes', 'no', default='no')
	#minimum energy for the apperture lightcurve, if -1 use the one define in energy section
	emin = float(default=-1)
	emax = float(default=-1)

[Ebin]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	NumEnergyBins = integer(default=0)
	#Compute an UL if the TS of the sources is <TSEnergyBins
	TSEnergyBins = float(default=9)
	# How to generate the Ebins
	# - logE: log scaled bins
	# - TS: similar TS per bin
	# - mix: half-way between log and TS.
	# - [ E1, E2, E3, E4, ..., EN ]: custom binning. 
	# - default is logE
	DistEbins = string(default="logE")
	# Submit Ebin children jobs to cluster (yes/no/parent), parent uses the config of the full range
	Submit = string(default='parent')

[TSMap]
	#Re-fit before computing the TS map
	Re-Fit = option('yes', 'no', default='no')
	#Numbers of pixel in x and y
	npix = integer(default=10)
	#Remove or not the target from the model
	RemoveTarget = option('yes', 'no', default='yes')
	#Generate the TS map pixel by pixel or by grouping the pixels by row.
	#(reduce the numbers of jobs but each job is longer)
	method = option('row', 'pixel', default='row')

[findsrc]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	#Reoptimize before
	Refit = option('yes', 'no', default='yes')

[srcprob]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	#radius for the computation
	rad = float(default=1)
	# list of sources
	srclist = string(default="")
        # number of photons to print
        numberPhoton = integer(default=10)

[Contours]
	parname1 = string(default="Prefactor")
	parname2 = string(default="Index")

[ComponentAnalysis]
        # EUnBinned to the energy (MeV) where
        # binned and unbinned analysis should be split
        # disabled if -1
        EUnBinned = float(default=-1)
        # Divide the analysis in FrontBack classes
        FrontBack = option('yes', 'no', default='no')
        # Divide the analysis in PSF classes
        PSF   = option('yes', 'no', default='no')
        # Divide the analysis in EDISP classes
        EDISP = option('yes', 'no', default='no')
        # Divide the analysis in EDISP classes
        FGL4 = option('yes', 'no', default='no')

[ObservationSimulation]
	infile = string(default=Simmodel.xml)
        srclist = string(default=source_names.txt)        
