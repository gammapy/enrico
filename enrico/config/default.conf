# Default config and validation file for Enrico.
#
# Besides providing default options it is also used
# to check the user config file.
# Options without default options here must be
# specified in the user config file

# Folder where the output will be stored
out = string
verbose = option('yes', 'no', default='yes')

[file]
	# File names (FT2, FT1 and XML). All the files have a tag
	spacecraft = string(default=spacecraft.fits)
	event = string(default=events.lis)
	xml = string(default=model.xml)
	tag = string(default='')

[environ]
	# Analysis environment configuration
	# Can also be done via shell environment variables
	FERMI_DATA_DIR = string(default='')
	FERMI_CATALOG_DIR = string(default='')
	FERMI_CATALOG = string(default='')
	FERMI_DIFFUSE_DIR = string(default='')
	FERMI_PREPROCESSED_DIR = string(default='')	

[target]
	# Target and modelling options
	name = string(default=MySource)
	ra = float
	dec = float
	# supported models are PowerLaw, PowerLaw2, LogParabola, PLExpCutoff, Generic
	spectrum = option('PowerLaw', 'PowerLaw2', 'LogParabola', 'PLExpCutoff', 'Generic', default='PowerLaw')


[analysis]
	# General analysis options
	likelihood = option(binned, unbinned, default=binned)
	evclass = integer(default=2, min=1, max=4)
	ComputeDiffrsp = option('yes', 'no', default='no')
	zmax = float(default=100)
	roicut = option('yes', 'no', default='no')
	filter = string(default='DATA_QUAL==1&&LAT_CONFIG==1&&ABS(ROCK_ANGLE)<52')
	irfs = string(default=P7SOURCE_V6)
	# if convtype =0 or 1, an ::FRONT of ::BACK is happend at the end of the irfs string automatically
	convtype = integer(default=-1, min=-1, max=1)

[space]
	rad = float(default=15)
	srcpix = integer(default=120)
	nxpix = integer(default=200)
	nypix = integer(default=200)
	nlong = float(default=120)
	nlat = float(default=120)
	binsz = float(default=0.1)
	coordsys = string(default=CEL)
	xref = float
	yref = float
	proj = string(default=AIT)
	phibins = integer(default=0)

[time]
	tmin = float(default=239557418)
	tmax = float(default=239557418)

[energy]
	#Energy of the analysis
	emin = float(default=100)
	emax = float(default=300000)
	enumbins_per_decade = integer(default=10)	

[fitting]
	optimizer = option('DRMNFB', 'DRMNGB', 'MINUIT', 'NEWMINUIT', default='MINUIT')
	ftol = float(default=1e-6)

[model]
	# The following options determine the xml model
	diffuse_gal_dir = string(default='')
	diffuse_iso_dir = string(default='')
	diffuse_gal = string(default='')
	diffuse_iso = string(default='')
	
	# user points sources for diffuse catalog sources
	# freeze spectral parameters for weak and far away sources:
	min_significance = float(default=4)
	max_radius = float(default=3) # -1 means use ROI radius

[tool]
	chatter = integer(default=2, min=1, max=4)
	clobber = option('yes', 'no', default='no')
	debug = option('yes', 'no', default='no')
	gui = string(default='no')
	mode = string(default='ql')

[Spectrum]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	#Generates plots (SED, model map)
	ResultPlots = option('yes', 'no', default='yes')
	#Freeze the spectral index of the source
	FrozenSpectralIndex = float(default=0, min=0, max=5)  # no implication if 0
	#Use the summed likelihood method
	SummedLike = option('yes', 'no', default='no')
	#Submit the job to a cluster?
	Submit = option('yes', 'no', default='no')

[UpperLimit]
	#Assumed Spectral index
	SpectralIndex = float(default=1.5, min=0, max=5)
	# UL method could be Profile or Integral (provided by the fermi collaboration)
	Method =  option('Profile', 'Integral', default='Profile')
	envelope = option('yes', 'no', default='no')
	#Compute an UL if the TS of the sources is <TSlimit
	TSlimit	= float(default=25)
	# Confidence level for the Ul computation
	cl = float(default=0.95)

[LightCurve]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	#Number of points for the LC
	NLCbin = integer(default = 20)
	#Index for the power law
	SpectralIndex =  float(default=2, min=0, max=5)
	MakeConfFile = option('yes', 'no', default='yes')
	#Compute Variability index as in the 2FGL. 
	ComputeVarIndex = option('yes', 'no', default='yes')
	#Submit the job to a cluster?
	Submit = option('yes', 'no', default='no')
	#Compute an UL if the TS of the sources is <TSLightCurve
	TSLightCurve = float(default=9)
	#Generates control plots
	DiagnosticPlots = option('yes', 'no', default='yes')

[AppLC]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	#Spectral index for the exposure calculation
	index = float(default=1.5)
	#Number of bins
	NLCbin = integer(default=64)
	#bin form data or frozen bin size
	binsFromData = option('yes', 'no', default='no')

[Ebin]
	#Generates fits files or not?
	FitsGeneration = option('yes', 'no', default='yes')
	NumEnergyBins = integer(default=0)
	#Compute an UL if the TS of the sources is <TSEnergyBins
	TSEnergyBins = integer(default=9)
	#Submit the job to a cluster?
	Submit = option('yes', 'no', default='no')

[TSMap]
	#Re-fit before computing the TS map
	Re-Fit = option('yes', 'no', default='no')
	#Numbers of pixel in x and y
	npix = integer(default=10)
	#Remove or not the target from the model
	RemoveTarget = option('yes', 'no', default='yes')
	#Submit the job to a cluster?
	Submit = option('yes', 'no', default='no')
	#Generate the TS map pixel by pixel or by grouping the pixels by row.
	#(reduce the numbers of jobs but each job are longer)
	method = option('row', 'pixel', default='row')
